---
import "../styles/main.css";
import AppHeader from "../components/AppHeader.astro";
import EventHeader from "../components/EventHeader.astro";
import ProductsSection from "../components/ProductsSection.astro";
import ResultsSection from "../components/ResultsSection.astro";
import EventsSection from "../components/EventsSection.astro";
import DialogOverlay from "../components/DialogOverlay.astro";
import Toast from "../components/Toast.astro";
const title = "Farra Calculator";
const desc =
	"Calcula costos y consumo de alcohol puro por persona. Guarda tus eventos y c√°rgalos cuando quieras.";
---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content=" width=device-width, initial-scale=1" />
		<link rel="icon" type="image/png" href="/favicon.png" />
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css"
		/>
		<title>{title}</title>
		<meta name="description" content={desc} />
	</head>
	<body>
		<AppHeader title={title} />

		<main class="container grid">
			<EventHeader />
			<ProductsSection />

			<div class="pair">
				<ResultsSection />
				<EventsSection />
			</div>

			<section class="sr-only" aria-live="polite" id="live-region"></section>
		</main>

		<DialogOverlay />
		<Toast />
	</body>
</html>

<script type="module" is:inline>
	const LS = {
		personas: "fiesta.personas",
		productos: "fiesta.productos",
		eventos: "fiesta.eventos",
		eventoActivoId: "fiesta.eventoActivoId",
	};
	const fmtCOP = new Intl.NumberFormat("es-CO", {
		style: "currency",
		currency: "COP",
		maximumFractionDigits: 0,
	});
	function uuid() {
		return typeof crypto !== "undefined" && "randomUUID" in crypto
			? crypto.randomUUID()
			: "id-" + Date.now() + "-" + Math.random().toString(16).slice(2);
	}
	function loadEventos() {
		try {
			return JSON.parse(localStorage.getItem(LS.eventos) || "[]");
		} catch {
			return [];
		}
	}
	function saveEventos(evts) {
		localStorage.setItem(LS.eventos, JSON.stringify(evts));
	}
	function getEventoActivoId() {
		return localStorage.getItem(LS.eventoActivoId);
	}
	function setEventoActivo(id) {
		if (id) localStorage.setItem(LS.eventoActivoId, id);
		else localStorage.removeItem(LS.eventoActivoId);
	}
	function getPersonas() {
		return Math.max(
			1,
			parseInt(localStorage.getItem(LS.personas) || "1", 10) || 1,
		);
	}
	function setPersonas(val) {
		localStorage.setItem(LS.personas, String(Math.max(1, val || 1)));
		autoSaveCurrent();
	}
	function getProductos() {
		try {
			return JSON.parse(localStorage.getItem(LS.productos) || "[]");
		} catch {
			return [];
		}
	}
	function setProductos(arr) {
		localStorage.setItem(LS.productos, JSON.stringify(arr || []));
		autoSaveCurrent();
	}
	function addProducto(p) {
		const arr = getProductos();
		arr.push(p);
		setProductos(arr);
	}
	function updateProducto(id, data) {
		const arr = getProductos();
		const idx = arr.findIndex((x) => x.id === id);
		if (idx === -1) return;
		arr[idx] = { ...arr[idx], ...data };
		setProductos(arr);
	}
	function removeProducto(id) {
		const arr = getProductos().filter((x) => x.id !== id);
		setProductos(arr);
	}
	function calcularResumen(pers, items) {
		const costo_total = items.reduce(
			(acc, p) => acc + p.precioUnidadCOP * p.cantidad,
			0,
		);
		const volumen_total_ml = items.reduce(
			(acc, p) => acc + p.cantidad * p.mlUnidad,
			0,
		);
		const alcohol_puro_total_ml = items.reduce(
			(acc, p) => acc + p.cantidad * p.mlUnidad * (p.abv / 100),
			0,
		);
		const costo_por_persona = pers > 0 ? costo_total / pers : 0;
		const ml_por_persona = pers > 0 ? alcohol_puro_total_ml / pers : 0;
		const litros = volumen_total_ml / 1000;
		return {
			costoTotalCOP: Math.round(costo_total),
			costoPorPersonaCOP: Math.round(costo_por_persona),
			volumenTotalMl: Math.round(volumen_total_ml),
			volumenTotalL: +litros.toFixed(2),
			alcoholPuroTotalMl: Math.round(alcohol_puro_total_ml),
			alcoholPuroPorPersonaMl: Math.round(ml_por_persona),
		};
	}
	function autoSaveCurrent() {
		const id = getEventoActivoId();
		if (!id) return;
		const evts = loadEventos();
		const idx = evts.findIndex((e) => e.id === id);
		if (idx === -1) return;
		evts[idx] = {
			...evts[idx],
			personas: getPersonas(),
			productos: structuredClone(getProductos()),
			resumen: calcularResumen(getPersonas(), getProductos()),
		};
		saveEventos(evts);
	}
	window.App = {
		LS,
		fmtCOP,
		uuid,
		loadEventos,
		saveEventos,
		getEventoActivoId,
		setEventoActivo,
		getPersonas,
		setPersonas,
		getProductos,
		setProductos,
		addProducto,
		updateProducto,
		removeProducto,
		calcularResumen,
		fmtCOP,
	};
	document.addEventListener("keydown", () => {});
	window.addEventListener("DOMContentLoaded", () => {
		const evts = loadEventos();
		const activo = getEventoActivoId();
		if (!evts.length && !activo)
			window.dispatchEvent(new CustomEvent("create-event:force"));
	});
</script>
